shiny::runApp()
runApp()
runApp()
runApp()
runApp()
#Application starts here
library(shiny)
library(htmlwidgets)
library(readxl)
library(networkD3)
library(tidyverse)
library(webshot)
library(magick)
library(viridis)
library(shinythemes)
library(janitor)
library(reshape2)
library(shinyWidgets)
library(shiny)
library(htmlwidgets)
library(readxl)
library(networkD3)
library(tidyverse)
library(webshot)
library(magick)
library(viridis)
library(shinythemes)
library(janitor)
library(reshape2)
library(shinyWidgets)
install.packages("shinyWidgets")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install_phantomjs(force = T)
runApp()
rlang::last_trace()
library(htmltools)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(htmlwidgets)
library(readxl)
library(networkD3)
library(tidyverse)
library(webshot)
library(magick)
library(viridis)
library(shinythemes)
library(janitor)
library(reshape2)
library(shinyWidgets)
library(kableExtra)
library(openxlsx)
library(htmltools)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(aa)
em.src <- tibble('Name' = unique(aa$`emission_category`))
View(em.src)
end_use$measures <- end.use
end.use <- tibble('Name' = aa$`source`)
end_use$measures <- end.use
ene.src <- tibble('Name' = unique(aa$`energy_source`))
ene.src <- na.omit(ene.src)
n_src <- nrow(ene.src)
nodes.hh <- tibble("Name" = "")
nodes.hh[1, 'Name'] <- 'Total'
non_ele <- ene.src %>%
filter(Name != 'Electricity')
if (!is_empty(non_ele$Name)) {
nodes.hh[2, 'Name'] <- 'Fuel'
}
nodes.h <- rbind(nodes.hh, ene.src, end.use, em.src)
View(nodes.h)
runApp()
runApp()
View(ene)
runApp()
View(nodes)
ene <- nodes %>%
filter(Name == 'Total Energy')
View(ene)
ene_link_val <- as.numeric(ene$No - 1)
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(nodes)
runApp()
View(links)
links <- links %>%
mutate(
Value = round(Value * units_conversion_e(), input$precision_e),
label = paste0(Source, " → ", Target, ": ", Value)
) %>%
mutate(
Value = round(Value * units_conversion(), input$precision),
label = paste0(Source, " → ", Target, ": ", Value)
) %>%
arrange(Source)
runApp()
View(links)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rlang::last_trace()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('C:/Users/btuser/Downloads/app ovais email.R')
runApp()
runApp()
runApp()
